module uart_rx(
  input wire clk,
  input wire reset,
  input wire rx,
  output reg [7:0] data,
  output reg rx_done
);
  //baud rate 9600 with 100M
  //CLKS_PER_BIT = 100MHz/9600 = 10,416.67
  parameter CLKS_PER_BI = 10417;
  //baud rate 115200 with 100MHz
  //CLKS_PER_BIT = 100MHz/115200 = 868
  //parameter CLKS_PER_BI = 868;
  
  reg [15:0] counter=0;
  reg [3:0] bit_counter =0;
  reg [1:0] state=0;
  
  
  always @(posedge clk or posedge reset) begin
    if(reset)begin
      data<=8'b0;
      rx_done <=1'b0;
      counter <=0;
      bit_counter <=0;
      state <=0;
    end
    else begin
      case(state)
        0://IDLE state
          if(~rx)begin
            counter<=0;
            state<=1;
            rx_done<=1'b0;
          end
          
        1://start bits
          if(counter ==CLK_PER_BIT/2))begin
            if(~rx)begin
              counter<=0;
              bit_counter <=0;
              state<=2;
            end else begin
              state<=0;
            end 
          end else begin
            state<=0;
          end 
        end else begin
          counter<=counter +1;
        end
         2://data bit
           if(counter =CLK_PER_BIT-1)begin
             counter<=0;
             data[bit_counter] <=rx;
             if(bit_counter <7)begin
               bit_counter<=bit_counter+1;
             end else begin
               state <=3;
            end
             end else begin
               counter <=counter +1;
             end
                    
        3: //stop bit
             if(counter =CLK_PER_BIT-1)begin
               if(rx) begin
                 rx_done<=1'b1;
               end
               state <=0;
               counter<=0;
             end else begin
               counter<=counter=1;
             end
       endcase
    end
  end
endmodule
          
